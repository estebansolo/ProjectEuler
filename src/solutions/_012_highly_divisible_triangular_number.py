"""
The sequence of triangle numbers is generated by adding the natural
numbers. So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

from utils import timing, execution


@timing
@execution
def highly_triangular_number(max_divisor):
  # sec^th, triangle number, divisors
  sec, triangle, divisors = 0, 0, 0
  
  while divisors <= max_divisor:
    sec += 1
    triangle = triangle_number(sec)
    divisors = count_divisors(triangle)

  return sec, triangle

def triangle_number(num):
  return sum(range(1, num + 1))

def count_divisors(triangle):
  divisors = 0
  for i in range(1, int(triangle ** 0.5)):
    if not triangle % i:
      divisors += 1

  return divisors * 2

def main():
  highly_triangular_number(5)
  highly_triangular_number(500)